#!/bin/bash

# pxmakemovie
#
# Generate a movie of deformed images resulting from elastix
#
# Usage:
# 
# pxmakemovie -d <dirname> -i <inputfile> -E <?> -R <?> -I <?> [-F]
#
#   -d: the directory name containing the tp-files
#   -E: the elastix level for which a tptable is desired
#   -R: the resolution for which a tptable is desired
#   -I: every I iterations an image is taken
#		-i: input file, the moving image
#   -G: flag: save output also as animated gif, besides as 3d mhd file.
#   -F: flag: force (default false): if set, old results are overwritten
#
# The result is an image:  <dirname>/movie.<E>.R<R>.{mhd,gif}
# WARNING: this script is not threadsafe!
# 
# Hint: use "convert -delay <time> moviein.gif movieout.gif" to change
# the speed of the animated gif. the time should be given in centiseconds.
#
functionname=`basename "$0"`

function PrintHelp()
{
  echo "Transform the moving image for all resolutions"
  echo
  echo "Usage:"
	echo $functionname
	echo "  -d      directory"
	echo "  -i      input file"
	echo "  [-E]    elastix level, default 0"
	echo "  [-R]    resolution level, default all"
	echo "  [-t]    number of threads, default all"
}

# Check for PrintHelp
if [[ $1 == "--help" ]]
then
	PrintHelp
	exit 64
fi

# Check for the number of arguments
if [ $# -lt 2 ] || [ $# -gt 12 ]
then
  echo "ERROR: not enough arguments!"
  echo "Call \""$functionname" --help\" for help."
  exit 64
fi

# Default values.
tpdir=""
elastixlevel=0
resolution=99
in=""
threads="99"

# Get the command line arguments.
while getopts "d:i:E:R:t:" argje
do
  case $argje in 
    d) tpdir="$OPTARG";;
    i) in="$OPTARG";;
    E) elastixlevel="$OPTARG";;
    R) resolution="$OPTARG";;
    t) threads="$OPTARG";;
    *) echo "ERROR: Wrong arguments!"; exit 65;;
  esac
done

# Some shortcuts.
E="$elastixlevel"
R="$resolution"

# Check the command line arguments.
if [[ "$tpdir" == "" ]]
then
  #echo "ERROR: The directory \"$tpdir\" does not exist."
  echo "ERROR: You should supply \"-d\"."
  exit 66
fi

if [[ "$in" == "" ]]
then
  #echo "ERROR: The directory \"$tpdir\" does not exist."
  echo "ERROR: You should supply \"-i\"."
  exit 66
fi

if [ ! -e "$in" ]
then
	echo "ERROR: The file \"$in\" does not exist. Quitting "$functionname"."
  exit 66
fi

# Check which resolution levels are required.
if [ "$R" -eq "99" ]
then
	i=0; Rarray="";
	while [ 1 ]
	do
		file=$tpdir"/TransformParameters."$E".R"$i".txt"
		if [ -e $file ]
		then
			Rarray=$Rarray" "$i
			let "i+=1"
		else
			break
		fi
	done
else
	Rarray=$R
fi

if [[ "$Rarray" == "" ]]
then
	echo "ERROR: no (finished) resolution information."
	exit 65;
fi

# Loop over all resolutions.
for R in $Rarray
do
	# Inform the user
	echo -n $R" "

	# Deform input image.
	tpfile=$tpdir"/TransformParameters."$E".R"$R".txt"
	transformix -in $in -tp $tpfile -out $tpdir -threads $threads > /dev/null
	# Check for success
	if [[ $? -ne 0 ]]
	then
		echo "ERROR: \"transformix -in "$in" -tp "$tpfile" -out "$tpdir"\" failed."
		exit 1
	fi

	# Rename
	outfile=$tpdir"/result."$E".R"$R".mhd"
	pxcastconvert -in $tpdir"/result.mhd" -out $outfile > /dev/null

done
echo

rm $tpdir"/result.mhd" $tpdir"/result.raw"

# Exit function, return success
exit 0

